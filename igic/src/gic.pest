upper       = _{ 'A'..'Z' }
lower       = _{ 'a'..'z' }
digit 	  = _{ '0'..'9' }
nothing   = _{ "" }
alphanum_lower = _{ lower | digit | "_" }
alphanum_upper    = _{ upper | digit | "_" }

WHITESPACE  = _{ " " | "\t" | "\r" | "\n" }
COMMENT     = _{ "//" ~ (!"\n" ~ ANY)* ~ ("\n" | EOI)
               | "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

var         = @{ alphanum_upper+ }
cnt       = @{ alphanum_lower+ }

term_args  = _{ term ~ ("," ~ term)* }

func       = { cnt ~ "(" ~ term_args ~ ")" }

list_empty = { "[" ~ "]" }
list_plain = { "[" ~ term ~ ("," ~ term)* ~ "]" }
list_cons  = { "[" ~ term ~ "|" ~ list ~ "]" | "[" ~ term ~ "|" ~ var ~ "]"}
list      = _{ list_empty | list_cons | list_plain }
term        = _{ var | func | cnt | list }

identifier = @{ upper ~ (alphanum_lower)* }
predicate   = { identifier ~ "(" ~ term_args ~ ")" }

forall_kw  = { "forall" | "∀" }
exists_kw  = { "exists" | "∃" }
quantifier = { forall_kw | exists_kw}

impl_op    = { "impl" | "⇒" | "=>" }
and_op     = { "and" | "∧" }
or_op      = { "or" | "∨" }
not_op     = { "not" | "¬" }

bottom     = { "bottom" | "⊥" }

expr = { pratt_expr }
pratt_expr  = { pratt_token* }

pratt_token = _{
    quantifier_expr
  | not_op
  | and_op
  | or_op
  | impl_op
  | bottom
  | predicate
  | group
}

group = { "(" ~ expr ~ ")" }

quantifier_expr = @{quantifier ~ WHITESPACE* ~ var ~ WHITESPACE* ~ "." ~ WHITESPACE*}

prefix  = { not_op| quantifier_expr }
primary = { predicate | bottom | "(" ~ expr ~ ")"}
infix   = { and_op | or_op | impl_op }

clause      = { expr ~ ";" }
file        = { SOI ~ ( clause ~ WHITESPACE? )* ~ EOI }
